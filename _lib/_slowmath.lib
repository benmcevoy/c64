#importonce
#import "_prelude.lib"

// slower implementations of multiplication, but does not need any lookup tables

/* @Command
Multiply two unsigned 8 bit numbers, 16 bit unsigned result in __val0 (LO),__val1 (HI)
From: https://llx.com/Neil/a2/mult.html
    */
.pseudocommand Mul16 op1:op2 {
    Set __val0:#0

    lda #0       // initialize result to 0
    ldx #8       // there are 8 bits in num2
l1: lsr op2      // get low bit of num2
    bcc l2       // 0 or 1?
    clc          // if 1, add num1
    adc op1
l2: ror          // "stairstep" shift (catching carry from add)
    ror __val0
    dex
    bne l1
    sta __val1
}

/* @Command
Multiply two signed bytes, returning a signed 16 result in __val0 (LO),__val1 (HI)
*/
.pseudocommand SMul16 op1:op2 {
    .errorif op1.getType() == AT_IMMEDIATE, "SMul16 does not support IMMEDIATE values. Error in op1."
    .errorif op2.getType() == AT_IMMEDIATE, "SMul16 does not support IMMEDIATE values. Error in op2."

    // a * -b is the same as -( a * b )
    // compute the sign first, then make positive and call Mul16
    // then apply the sign

    // if the MSB on EITHER operand is high, exclusively, e.g. XOR
    // then negative, if both high or both low then positive result

    // in the example from the the Mul16 above they php the processor flags, which has N,Z
    // instead I store it in __sign as I am not that smart

    Set __sign:#0

    lda #128
    bit op1
    beq !+
        inc __sign
        Negate op1
    !:
    
    lda #128
    bit op2
    beq !+
        inc __sign
        Negate op2
    !:

    Mul16 op1:op2

    // set sign of result __val0 __val1
    // here they pull the processor flags back off the stack
    // and do a BPL against the N flag, maybe they save a few cycles but it bends my brain...
    lda __sign
    cmp #1
    bne !+
        Negate16 __val0: __val1
    !:
}

__sign: .byte 0
/* @Command Multiply two signed words, return 32 bit result in  __val0 (LO) to __val3 (HI). */
.pseudocommand SMulW32 op1Lo:op1Hi:op2Lo:op2Hi  {
    .errorif op1Lo.getType() == AT_IMMEDIATE, "SMulW32 does not support IMMEDIATE values. Error in op1Lo."
    .errorif op1Hi.getType() == AT_IMMEDIATE, "SMulW32 does not support IMMEDIATE values. Error in op1Hi."
    .errorif op2Lo.getType() == AT_IMMEDIATE, "SMulW32 does not support IMMEDIATE values. Error in op2Lo."
    .errorif op2Hi.getType() == AT_IMMEDIATE, "SMulW32 does not support IMMEDIATE values. Error in op2Hi."

    Set __sign:#0

    lda #128
    bit op1Hi
    beq !+
        inc __sign
        Negate16 op1Lo:op1Hi
    !:
    
    lda #128
    bit op2Hi
    beq !+
        inc __sign
        Negate16 op2Lo:op2Hi
    !:

    MulW32 op1Lo:op1Hi:op2Lo:op2Hi
   
    lda  __sign
    cmp #1
    bne !+
        Negate32 __val0: __val1: __val2: __val3
    !:
}

/* @Command Multiply two 16 bit values, return 32 bit result in  __val0 (LO) to __val3 (HI).
    From: https://llx.com/Neil/a2/mult.html */
.pseudocommand MulW32  op1Lo:op1Hi:op2Lo:op2Hi {
    .errorif op1Lo.getType() == AT_IMMEDIATE, "MulW32 does not support IMMEDIATE values. Error in op1Lo."
    .errorif op1Hi.getType() == AT_IMMEDIATE, "MulW32 does not support IMMEDIATE values. Error in op1Hi."
    .errorif op2Lo.getType() == AT_IMMEDIATE, "MulW32 does not support IMMEDIATE values. Error in op2Lo."
    .errorif op2Hi.getType() == AT_IMMEDIATE, "MulW32 does not support IMMEDIATE values. Error in op2Hi."

    lda #0       // initialize result to 0
    sta __val2
    ldx #16      // there are 16 bits in num2
l1: lsr op2Hi    // get low bit of num2
    ror op2Lo
    bcc l2       // 0 or 1?
    tay          // if 1, add num1 (hi byte of result is in a)
    clc
    lda op1Lo
    adc __val2
    sta __val2
    tya
    adc op1Hi
l2: ror          // "stairstep" shift
    ror __val2
    ror __val1
    ror __val0
    dex
    bne l1
    sta __val3
}

/* @Command Add two 16 bit words, result in  __val0 (LO),__val1 (HI). */
.pseudocommand Add16 op1Lo:op1Hi:op2Lo:op2Hi {
    lda op1Lo
    clc
    adc op2Lo
    sta __val0
    lda op1Hi
    adc op2Hi
    sta __val1
}

/* @Command Saturate - Extend a byte in place to a two's complement word. */
.pseudocommand Sat16 lo:hi {
    .errorif lo.getType() == AT_IMMEDIATE, "Sat16 does not support IMMEDIATE values. Error in lo."
    .errorif hi.getType() == AT_IMMEDIATE, "Sat16 does not support IMMEDIATE values. Error in hi."

    Set hi:#0
    lda lo
    // test the MSB by rotating into .C flag
    rol
    bcc !+
        // add high .byte, sign extension
        Set hi:#$ff
    !:
}

/* @Command Subtract two words,result in  __val0 (LO),__val1 (HI). */
.pseudocommand Sub16 op1Lo: op1Hi: op2Lo: op2Hi {
    lda op1Lo
    sec
    sbc op2Lo
    sta __val0
    lda op1Hi
    sbc op2Hi
    sta __val1
}