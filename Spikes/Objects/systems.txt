learning from https://www.youtube.com/watch?v=UU7_rbGC3Bo

AREA: {
        Data: {
            // reserved space and variables, arrays, indexes, etc
            index: .byte 0
            x: .fill ARRAY_SIZE, 0
            y: .fill ARRAY_SIZE, 0
            height:           etc...


            so we can access
            index into the array

            ldx index
            lda (Data.height), X

        }
        Init: { 
            jmp Reset
            we have jumped (GOTO), so the Reset rts will act as this subroutines rts, if that makes sense.

        }
        Reset: {
            // do reset stuff
            rts
        }
        Add: { 
           the .X register is used in this SYSTEM as the current index
           so  
           set .X to the current value
           ldx Data.nextIndex
           inc Data.nextIndex

           now .X has the current index and Data.nextIndex lives up to it's name
       
        }
        Check: { 
            is a bool return
            uses clc/sec - when carry set then true
        }
}

.macro SM_AddArea (x,y,w,h) {
    jsr AREA.Add
    now .X has the current index
    // set AREA.Data with x,y,w,h etc
}

In the system AREA 
- it is *like* a static module
- macros handle the "leaky abstraction" part of setting up the data etc
- .X which is an *indexing register* is use as the *index* - duh.
- boolean methods use the carry flag to return the boolean result
- the SYSTEM is accessed via the .macros, like a public wrapper


Self modifing code

// reserve two bytes and give it a silly memorable value
Label: #$BEEF



# subroutines

bool Foo(A,X,Y,c)

accepts and returns

{empty set}
bool
byte
byte, bool
byte, byte
byte, byte, bool
byte, byte, byte
byte, byte, byte, bool
word
word, bool
byte, word
byte, word, bool
word, byte
word, byte, bool

returns upto 24 bits and carry
carry normally signifies success/fail

always be using registers
avoid state
state belongs to a SYSTEM not a FUNCTION
temporay storage is available as ZP memory (__tmp0-3)

 use registers and avoid memory usage 
    stack pha/pla is about same speed as sta/lda
    zero page is fastest
 avoid branches (hard but optimal)


# .macro


.macro Foo(a,b,c,d,etc)
{
    Setup registers, understands the conventions of the target routine
    jsr routine  upto 25 bits
    optionally teardown or cleanup
}

# Data types

Pick a lane!  only 8bit and 16 bit values.  for multiplication we can "decimate" (binarate?) 32 bit results to 16 bit.


# an extra flag

CLV clear overflow

can be set :

lda #%00100000
bit (memory address that contains $60)